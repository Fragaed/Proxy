// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	models "proxy/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// CheckAPI provides a mock function with given fields:
func (_m *API) CheckAPI() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoReq provides a mock function with given fields:
func (_m *API) DoReq() (*models.Response, error) {
	ret := _m.Called()

	var r0 *models.Response
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.Response, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
